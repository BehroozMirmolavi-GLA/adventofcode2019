library(tidyverse)


# day 1 -------------------------------------------------------------------

df <- read.table(pipe("pbpaste"), sep = "\t", header = F)

fuel <- function(c = df) {
  c %>% mutate(V1 = floor(.[[1]] / 3) - 2) %>% summarise(sum(V1))
}
fuel(df)
#3405721

fuelforfuel <- function(x) {
  success <- FALSE
  y <- 0
  while (!success) {
    # do something
    x <- max(floor(x / 3) - 2, 0)
    # check for success
    success <- (x <= 0)
    y <- x + y
  }
  return(y)
}
fuelforfuel(100756)
#50346
sum(sapply(df$V1, fuelforfuel))
#5105716


# day 2 -------------------------------------------------------------------

df <- readClipboard()
df <- as.numeric(unlist(strsplit(df, ',')))
df[2] <- 12
df[3] <- 2
for (i in seq(from = 1, to = length(df), by = 4)) {
  if (df[i] == 1) {
    df[df[i + 3] + 1] <- df[df[i + 1] + 1] + df[df[i + 2] + 1]
  } else if (df[i] == 2) {
    df[df[i + 3] + 1] <- df[df[i + 1] + 1] * df[df[i + 2] + 1]
  } else if (df[i] == 99) {
    break
  }
}

#19690720
dforig <- readClipboard()
dforig <- as.numeric(unlist(strsplit(dforig, ',')))
# df <- dforig

possibilities <- expand.grid(x = seq(1, 100, 1), y = seq(1, 100, 1))
#around 7 minute 40 estimated run time
start_time <- Sys.time()
x <- 1
while (!success) {
  # do something
  df <- dforig
  df[2] <- possibilities[x, ]$x
  df[3] <- possibilities[x, ]$y
  for (i in seq(from = 1,
                to = length(df),
                by = 4)) {
    if (df[i] == 1) {
      df[df[i + 3] + 1] <- df[df[i + 1] + 1] + df[df[i + 2] + 1]
    } else if (df[i] == 2) {
      df[df[i + 3] + 1] <- df[df[i + 1] + 1] * df[df[i + 2] + 1]
    } else if (df[i] == 99) {
      break
    }
  }
  # check for success
  success <- (df[1] == 19690720)
  x <- x + 1
}
end_time <- Sys.time()
end_time - start_time
#successful values
df[2:3]
#8609

# day 3 -------------------------------------------------------------------
library(retistruct)
dforig <- read.table(pipe("pbpaste"), sep = ",", header = F)
a <- as.character(unlist(dforig[1, ], use.names = FALSE))
a <- data.frame(a) %>% separate(a, into = c("direction", "distance"),
                             sep = "(?<=[A-Za-z])(?=[0-9])")
b <- as.character(unlist(dforig[2, ], use.names = FALSE))
b <- data.frame(b) %>% separate(b, into = c("direction", "distance"),
                             sep = "(?<=[A-Za-z])(?=[0-9])")

instructiontovector <- function(a) {
  a$distance <- as.numeric(a$distance)
  df <- data.frame("x" = as.numeric(), "y" = as.numeric())
  
  if (a[1, 1] == "R") {
    df[1, 1] <- 0 + a[1, 2]
    df[1, 2] <- 0
  } else if (a[1, 1] == "L") {
    df[1, 1] <- 0 - a[1, 2]
    df[1, 2] <- 0
  } else if (a[1, 1] == "U") {
    df[1, 2] <- 0 + a[1, 2]
    df[1, 1] <- 0
  } else if (a[1, 1] == "D") {
    df[1, 2] <- 0 - a[1, 2]
    df[1, 1] <- 0
  }
  
  for (i in 2:nrow(a)) {
    if (a[i, 1] == "R") {
      df[i, 1] <- df[i - 1, 1] + a[i, 2]
      df[i, 2] <- df[i - 1, 2]
    } else if (a[i, 1] == "L") {
      df[i, 1] <- df[i - 1, 1] - a[i, 2]
      df[i, 2] <- df[i - 1, 2]
    } else if (a[i, 1] == "U") {
      df[i, 2] <- df[i - 1, 2] + a[i, 2]
      df[i, 1] <- df[i - 1, 1]
    } else if (a[i, 1] == "D") {
      df[i, 2] <- df[i - 1, 2] - a[i, 2]
      df[i, 1] <- df[i - 1, 1]
    }
  }
  return(df)
}

#then check each dont intersect at interior point using line.line
a1 <- instructiontovector(a)
b1 <- instructiontovector(b)

distance <- Inf
for (i in 1:(nrow(a1) - 1)) {
  for (j in 1:(nrow(a1) - 1)) {
    intersection <- line.line.intersection(unlist(a1[j, ])
                                           ,
                                           unlist(a1[j + 1, ])
                                           ,
                                           unlist(b1[i, ])
                                           ,
                                           unlist(b1[i + 1, ]),
                                           interior.only = T)
    
    if (!is.na(intersection[1])) {
      dist <- abs(intersection[1] - 0) + abs(intersection[2] - 0)
      
      if (dist < distance) {
        success <- bind_rows(a1[j, ], a1[j + 1, ], b1[i, ], b1[i + 1, ])
        distance <- pmin(dist, distance)
      }
    }
  }
} 

#part 2, this time optimise for minimise steps (cum sum of row)
distance <- Inf
for (i in 1:(nrow(a1) - 1)) {
  for (j in 1:(nrow(a1) - 1)) {
    intersection <- line.line.intersection(unlist(a1[j,])
                                           ,
                                           unlist(a1[j + 1,])
                                           ,
                                           unlist(b1[i,])
                                           ,
                                           unlist(b1[i + 1,]),
                                           interior.only = T)
    
    if (!is.na(intersection[1])) {
      dist <- sum(a[1:(j), 2]) + sum(b[1:(i), 2]) +
        abs(sum(intersection - a1[j, ])) +
        abs(sum(intersection - b1[i, ]))
      
      if (dist < distance) {
        success <- bind_rows(a1[j,], a1[j + 1,], b1[i,], b1[i + 1,])
        distance <- pmin(dist, distance)
        i2 <- paste(i)
        j2 <-  paste(j)
      }
    }
  }
}

# day 4 -------------------------------------------------------------------
#147981-691423
range <- 147981:691423
success <- as.numeric()

for (i in 1:length(range)) {
  digits <- as.numeric(unlist(str_split(range[i], "")))
  
  if (digits[2] < digits[1]) {
    next
  } else if (digits[3] < digits[2]) {
    next
  } else if (digits[4] < digits[3]) {
    next
  } else if (digits[5] < digits[4]) {
    next
  } else if (digits[6] < digits[5]) {
    next
  } else if (length(unique(digits)) == 6) {
    next
  } else {
    success <- c(success, as.numeric(paste(digits, collapse = "")))
  }
}
}
#1790
#part 2
success <- as.numeric()
#digits <- as.numeric(unlist(str_split(155566,"")))
for (i in 1:length(range)) {
  digits <- as.numeric(unlist(str_split(range[i], "")))
  
  if (digits[2] < digits[1]) {
    next
  } else if (digits[3] < digits[2]) {
    next
  } else if (digits[4] < digits[3]) {
    next
  } else if (digits[5] < digits[4]) {
    next
  } else if (digits[6] < digits[5]) {
    next
  } else if (length(unique(digits)) == 6) {
    next
  } else {
    k = 1
    while (k < 6) {
      state = TRUE
      n = 0
      while (state & k < 6) {
        state = digits[k] == digits[k + 1]
        if (state) {
          n = n + 1
        }
        k = k + 1
      }
    }
    if (n == 1) {
      success <- c(success, as.numeric(paste(digits, collapse = "")))
    }
  }
}
}
